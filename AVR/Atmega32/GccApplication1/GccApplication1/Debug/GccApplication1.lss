
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000336  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  000003aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001420  00000000  00000000  000006d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b58  00000000  00000000  00001af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dff  00000000  00000000  00002650  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000608  00000000  00000000  00003450  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000086e  00000000  00000000  00003a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000be1  00000000  00000000  000042c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  00004ea7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 05 01 	jmp	0x20a	; 0x20a <__vector_1>
   8:	0c 94 31 01 	jmp	0x262	; 0x262 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 89 01 	jmp	0x312	; 0x312 <__vector_9>
  28:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <__vector_10>
  2c:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e3       	ldi	r30, 0x36	; 54
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 99 01 	jmp	0x332	; 0x332 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:



int main(void)
{
	DIO_SetPinDirection(PIND0,PIN_INPUT);
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	88 e1       	ldi	r24, 0x18	; 24
  96:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_SetPinDirection>
	DIO_SetPinDirection(PIND1,PIN_OUTPUT);
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	89 e1       	ldi	r24, 0x19	; 25
  9e:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_SetPinDirection>
	UART_Init();
  a2:	0e 94 8a 01 	call	0x314	; 0x314 <UART_Init>
	while(1)
	{
		u8 x = 0;
	//	x = UART_Receive();
		UART_Transmit('A');
  a6:	81 e4       	ldi	r24, 0x41	; 65
  a8:	0e 94 93 01 	call	0x326	; 0x326 <UART_Transmit>
  ac:	fc cf       	rjmp	.-8      	; 0xa6 <main+0x14>

000000ae <__vector_16>:
void ADC_SetCallBack(void (*CALLBACK)(void))
{
	ADC_CALLBACK = CALLBACK;
}
void __vector_16 (void)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	2f 93       	push	r18
  ba:	3f 93       	push	r19
  bc:	4f 93       	push	r20
  be:	5f 93       	push	r21
  c0:	6f 93       	push	r22
  c2:	7f 93       	push	r23
  c4:	8f 93       	push	r24
  c6:	9f 93       	push	r25
  c8:	af 93       	push	r26
  ca:	bf 93       	push	r27
  cc:	ef 93       	push	r30
  ce:	ff 93       	push	r31
	ADC_CALLBACK();
  d0:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d4:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  d8:	09 95       	icall
}
  da:	ff 91       	pop	r31
  dc:	ef 91       	pop	r30
  de:	bf 91       	pop	r27
  e0:	af 91       	pop	r26
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	7f 91       	pop	r23
  e8:	6f 91       	pop	r22
  ea:	5f 91       	pop	r21
  ec:	4f 91       	pop	r20
  ee:	3f 91       	pop	r19
  f0:	2f 91       	pop	r18
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <DIO_SetPinDirection>:
#include "DIO_Private.h"
#include "DIO_interface.h"

void DIO_SetPinDirection(u8 PinCopy,u8 PinDirCopy)
{
	u8 PORT = PinCopy/8;
  fc:	98 2f       	mov	r25, r24
  fe:	96 95       	lsr	r25
 100:	96 95       	lsr	r25
 102:	96 95       	lsr	r25
	u8 PIN = PinCopy%8;
 104:	87 70       	andi	r24, 0x07	; 7
	switch (PinDirCopy)
 106:	66 23       	and	r22, r22
 108:	09 f4       	brne	.+2      	; 0x10c <DIO_SetPinDirection+0x10>
 10a:	3f c0       	rjmp	.+126    	; 0x18a <DIO_SetPinDirection+0x8e>
 10c:	61 30       	cpi	r22, 0x01	; 1
 10e:	09 f0       	breq	.+2      	; 0x112 <DIO_SetPinDirection+0x16>
 110:	7b c0       	rjmp	.+246    	; 0x208 <DIO_SetPinDirection+0x10c>
	{
	case PIN_OUTPUT:
		switch (PORT)
 112:	91 30       	cpi	r25, 0x01	; 1
 114:	99 f0       	breq	.+38     	; 0x13c <DIO_SetPinDirection+0x40>
 116:	28 f0       	brcs	.+10     	; 0x122 <DIO_SetPinDirection+0x26>
 118:	92 30       	cpi	r25, 0x02	; 2
 11a:	e9 f0       	breq	.+58     	; 0x156 <DIO_SetPinDirection+0x5a>
 11c:	93 30       	cpi	r25, 0x03	; 3
 11e:	41 f1       	breq	.+80     	; 0x170 <DIO_SetPinDirection+0x74>
 120:	08 95       	ret
		{
		case PORTA: SET_BIT(DDRA_Register,PIN);break;
 122:	4a b3       	in	r20, 0x1a	; 26
 124:	21 e0       	ldi	r18, 0x01	; 1
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	b9 01       	movw	r22, r18
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_SetPinDirection+0x34>
 12c:	66 0f       	add	r22, r22
 12e:	77 1f       	adc	r23, r23
 130:	8a 95       	dec	r24
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_SetPinDirection+0x30>
 134:	cb 01       	movw	r24, r22
 136:	84 2b       	or	r24, r20
 138:	8a bb       	out	0x1a, r24	; 26
 13a:	08 95       	ret
		case PORTB: SET_BIT(DDRB_Register,PIN);break;
 13c:	47 b3       	in	r20, 0x17	; 23
 13e:	21 e0       	ldi	r18, 0x01	; 1
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	b9 01       	movw	r22, r18
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_SetPinDirection+0x4e>
 146:	66 0f       	add	r22, r22
 148:	77 1f       	adc	r23, r23
 14a:	8a 95       	dec	r24
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_SetPinDirection+0x4a>
 14e:	cb 01       	movw	r24, r22
 150:	84 2b       	or	r24, r20
 152:	87 bb       	out	0x17, r24	; 23
 154:	08 95       	ret
		case PORTC: SET_BIT(DDRC_Register,PIN);break;
 156:	44 b3       	in	r20, 0x14	; 20
 158:	21 e0       	ldi	r18, 0x01	; 1
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	b9 01       	movw	r22, r18
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_SetPinDirection+0x68>
 160:	66 0f       	add	r22, r22
 162:	77 1f       	adc	r23, r23
 164:	8a 95       	dec	r24
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_SetPinDirection+0x64>
 168:	cb 01       	movw	r24, r22
 16a:	84 2b       	or	r24, r20
 16c:	84 bb       	out	0x14, r24	; 20
 16e:	08 95       	ret
		case PORTD: SET_BIT(DDRD_Register,PIN);break;
 170:	41 b3       	in	r20, 0x11	; 17
 172:	21 e0       	ldi	r18, 0x01	; 1
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	b9 01       	movw	r22, r18
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_SetPinDirection+0x82>
 17a:	66 0f       	add	r22, r22
 17c:	77 1f       	adc	r23, r23
 17e:	8a 95       	dec	r24
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_SetPinDirection+0x7e>
 182:	cb 01       	movw	r24, r22
 184:	84 2b       	or	r24, r20
 186:	81 bb       	out	0x11, r24	; 17
 188:	08 95       	ret
		}
		break;
	case PIN_INPUT:
		switch (PORT)
 18a:	91 30       	cpi	r25, 0x01	; 1
 18c:	a1 f0       	breq	.+40     	; 0x1b6 <DIO_SetPinDirection+0xba>
 18e:	28 f0       	brcs	.+10     	; 0x19a <DIO_SetPinDirection+0x9e>
 190:	92 30       	cpi	r25, 0x02	; 2
 192:	f9 f0       	breq	.+62     	; 0x1d2 <DIO_SetPinDirection+0xd6>
 194:	93 30       	cpi	r25, 0x03	; 3
 196:	59 f1       	breq	.+86     	; 0x1ee <DIO_SetPinDirection+0xf2>
 198:	08 95       	ret
		{
		case PORTA: CLR_BIT(DDRA_Register,PIN);break;
 19a:	4a b3       	in	r20, 0x1a	; 26
 19c:	21 e0       	ldi	r18, 0x01	; 1
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	b9 01       	movw	r22, r18
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_SetPinDirection+0xac>
 1a4:	66 0f       	add	r22, r22
 1a6:	77 1f       	adc	r23, r23
 1a8:	8a 95       	dec	r24
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_SetPinDirection+0xa8>
 1ac:	cb 01       	movw	r24, r22
 1ae:	80 95       	com	r24
 1b0:	84 23       	and	r24, r20
 1b2:	8a bb       	out	0x1a, r24	; 26
 1b4:	08 95       	ret
		case PORTB: CLR_BIT(DDRB_Register,PIN);break;
 1b6:	47 b3       	in	r20, 0x17	; 23
 1b8:	21 e0       	ldi	r18, 0x01	; 1
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	b9 01       	movw	r22, r18
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <DIO_SetPinDirection+0xc8>
 1c0:	66 0f       	add	r22, r22
 1c2:	77 1f       	adc	r23, r23
 1c4:	8a 95       	dec	r24
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <DIO_SetPinDirection+0xc4>
 1c8:	cb 01       	movw	r24, r22
 1ca:	80 95       	com	r24
 1cc:	84 23       	and	r24, r20
 1ce:	87 bb       	out	0x17, r24	; 23
 1d0:	08 95       	ret
		case PORTC: CLR_BIT(DDRC_Register,PIN);break;
 1d2:	44 b3       	in	r20, 0x14	; 20
 1d4:	21 e0       	ldi	r18, 0x01	; 1
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	b9 01       	movw	r22, r18
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_SetPinDirection+0xe4>
 1dc:	66 0f       	add	r22, r22
 1de:	77 1f       	adc	r23, r23
 1e0:	8a 95       	dec	r24
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <DIO_SetPinDirection+0xe0>
 1e4:	cb 01       	movw	r24, r22
 1e6:	80 95       	com	r24
 1e8:	84 23       	and	r24, r20
 1ea:	84 bb       	out	0x14, r24	; 20
 1ec:	08 95       	ret
		case PORTD: CLR_BIT(DDRD_Register,PIN);break;
 1ee:	41 b3       	in	r20, 0x11	; 17
 1f0:	21 e0       	ldi	r18, 0x01	; 1
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	b9 01       	movw	r22, r18
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_SetPinDirection+0x100>
 1f8:	66 0f       	add	r22, r22
 1fa:	77 1f       	adc	r23, r23
 1fc:	8a 95       	dec	r24
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_SetPinDirection+0xfc>
 200:	cb 01       	movw	r24, r22
 202:	80 95       	com	r24
 204:	84 23       	and	r24, r20
 206:	81 bb       	out	0x11, r24	; 17
 208:	08 95       	ret

0000020a <__vector_1>:
	}
}



void __vector_1 (void){
 20a:	1f 92       	push	r1
 20c:	0f 92       	push	r0
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	0f 92       	push	r0
 212:	11 24       	eor	r1, r1
 214:	2f 93       	push	r18
 216:	3f 93       	push	r19
 218:	4f 93       	push	r20
 21a:	5f 93       	push	r21
 21c:	6f 93       	push	r22
 21e:	7f 93       	push	r23
 220:	8f 93       	push	r24
 222:	9f 93       	push	r25
 224:	af 93       	push	r26
 226:	bf 93       	push	r27
 228:	ef 93       	push	r30
 22a:	ff 93       	push	r31
	if (func_CallBack != NULL)
 22c:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <func_CallBack>
 230:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <func_CallBack+0x1>
 234:	30 97       	sbiw	r30, 0x00	; 0
 236:	09 f0       	breq	.+2      	; 0x23a <__vector_1+0x30>
	{
		func_CallBack();
 238:	09 95       	icall
	}
	// Clear Flag
	SET_BIT(GICR_Register,6);
 23a:	8b b7       	in	r24, 0x3b	; 59
 23c:	80 64       	ori	r24, 0x40	; 64
 23e:	8b bf       	out	0x3b, r24	; 59
 240:	ff 91       	pop	r31
 242:	ef 91       	pop	r30
 244:	bf 91       	pop	r27
 246:	af 91       	pop	r26
 248:	9f 91       	pop	r25
 24a:	8f 91       	pop	r24
 24c:	7f 91       	pop	r23
 24e:	6f 91       	pop	r22
 250:	5f 91       	pop	r21
 252:	4f 91       	pop	r20
 254:	3f 91       	pop	r19
 256:	2f 91       	pop	r18
 258:	0f 90       	pop	r0
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	0f 90       	pop	r0
 25e:	1f 90       	pop	r1
 260:	18 95       	reti

00000262 <__vector_2>:
{
	func_CallBack = func;
}

void __vector_2 (void)
{
 262:	1f 92       	push	r1
 264:	0f 92       	push	r0
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	0f 92       	push	r0
 26a:	11 24       	eor	r1, r1
 26c:	2f 93       	push	r18
 26e:	3f 93       	push	r19
 270:	4f 93       	push	r20
 272:	5f 93       	push	r21
 274:	6f 93       	push	r22
 276:	7f 93       	push	r23
 278:	8f 93       	push	r24
 27a:	9f 93       	push	r25
 27c:	af 93       	push	r26
 27e:	bf 93       	push	r27
 280:	ef 93       	push	r30
 282:	ff 93       	push	r31
	func_CallBack();	
 284:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <func_CallBack>
 288:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <func_CallBack+0x1>
 28c:	09 95       	icall
 28e:	ff 91       	pop	r31
 290:	ef 91       	pop	r30
 292:	bf 91       	pop	r27
 294:	af 91       	pop	r26
 296:	9f 91       	pop	r25
 298:	8f 91       	pop	r24
 29a:	7f 91       	pop	r23
 29c:	6f 91       	pop	r22
 29e:	5f 91       	pop	r21
 2a0:	4f 91       	pop	r20
 2a2:	3f 91       	pop	r19
 2a4:	2f 91       	pop	r18
 2a6:	0f 90       	pop	r0
 2a8:	0f be       	out	0x3f, r0	; 63
 2aa:	0f 90       	pop	r0
 2ac:	1f 90       	pop	r1
 2ae:	18 95       	reti

000002b0 <__vector_10>:
	FUNC_PTR = CallBackFuch;
}


void __vector_10(void)
{
 2b0:	1f 92       	push	r1
 2b2:	0f 92       	push	r0
 2b4:	0f b6       	in	r0, 0x3f	; 63
 2b6:	0f 92       	push	r0
 2b8:	11 24       	eor	r1, r1
	//FUNC_PTR();
}
 2ba:	0f 90       	pop	r0
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	0f 90       	pop	r0
 2c0:	1f 90       	pop	r1
 2c2:	18 95       	reti

000002c4 <__vector_11>:
void __vector_11(void)
{
 2c4:	1f 92       	push	r1
 2c6:	0f 92       	push	r0
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	0f 92       	push	r0
 2cc:	11 24       	eor	r1, r1
 2ce:	2f 93       	push	r18
 2d0:	3f 93       	push	r19
 2d2:	4f 93       	push	r20
 2d4:	5f 93       	push	r21
 2d6:	6f 93       	push	r22
 2d8:	7f 93       	push	r23
 2da:	8f 93       	push	r24
 2dc:	9f 93       	push	r25
 2de:	af 93       	push	r26
 2e0:	bf 93       	push	r27
 2e2:	ef 93       	push	r30
 2e4:	ff 93       	push	r31
	FUNC_PTR();
 2e6:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <FUNC_PTR>
 2ea:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <FUNC_PTR+0x1>
 2ee:	09 95       	icall
}
 2f0:	ff 91       	pop	r31
 2f2:	ef 91       	pop	r30
 2f4:	bf 91       	pop	r27
 2f6:	af 91       	pop	r26
 2f8:	9f 91       	pop	r25
 2fa:	8f 91       	pop	r24
 2fc:	7f 91       	pop	r23
 2fe:	6f 91       	pop	r22
 300:	5f 91       	pop	r21
 302:	4f 91       	pop	r20
 304:	3f 91       	pop	r19
 306:	2f 91       	pop	r18
 308:	0f 90       	pop	r0
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	0f 90       	pop	r0
 30e:	1f 90       	pop	r1
 310:	18 95       	reti

00000312 <__vector_9>:
u16 TIMER1_OVRread(void)
{
	return TCNT1_Register;
}
void __vector_9 (void)
{
 312:	08 95       	ret

00000314 <UART_Init>:


void UART_Init(void)
{
	/*Set Baud Rate*/
	UBRR_Register = BAUD_9600;
 314:	83 e3       	ldi	r24, 0x33	; 51
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	9a b9       	out	0x0a, r25	; 10
 31a:	89 b9       	out	0x09, r24	; 9
	/*Enable reciever & transmitter*/
	UCSRB_Register = (1<<RXEN)|(1<<TXEN);
 31c:	88 e1       	ldi	r24, 0x18	; 24
 31e:	8a b9       	out	0x0a, r24	; 10
	/*Set frame format: 8data, 2stop bit*/
	UCSRC_Register = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0); 
 320:	8e e8       	ldi	r24, 0x8E	; 142
 322:	80 bd       	out	0x20, r24	; 32
 324:	08 95       	ret

00000326 <UART_Transmit>:
}

void UART_Transmit(u8 data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA_Register & (1<<UDRE)) );
 326:	5d 9b       	sbis	0x0b, 5	; 11
 328:	fe cf       	rjmp	.-4      	; 0x326 <UART_Transmit>
	/* Put data into buffer, sends the data */
	UDR_Register = data;
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	9d b9       	out	0x0d, r25	; 13
 32e:	8c b9       	out	0x0c, r24	; 12
 330:	08 95       	ret

00000332 <_exit>:
 332:	f8 94       	cli

00000334 <__stop_program>:
 334:	ff cf       	rjmp	.-2      	; 0x334 <__stop_program>
