
Sr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005a0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000734  0800073c  0001073c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000734  08000734  0001073c  2**0
                  CONTENTS
  4 .ARM          00000000  08000734  08000734  0001073c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000734  0800073c  0001073c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000734  08000734  00010734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000738  08000738  00010738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001073c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003ea8  20000000  0800073c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003ea8  0800073c  00013ea8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001073c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000cb0  00000000  00000000  0001076c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005bb  00000000  00000000  0001141c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a0  00000000  00000000  000119d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000138  00000000  00000000  00011b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f3b  00000000  00000000  00011cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000b17  00000000  00000000  00012beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003e29  00000000  00000000  00013702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001752b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004b8  00000000  00000000  0001757c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800071c 	.word	0x0800071c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	0800071c 	.word	0x0800071c

080001d4 <DMA1_voidChannelInit>:

#include "DMA_Private.h"
#include "DMA_Interface.h"

void	DMA1_voidChannelInit(u8 Channel_copy,u8 source,u8 sink)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
 80001de:	460b      	mov	r3, r1
 80001e0:	71bb      	strb	r3, [r7, #6]
 80001e2:	4613      	mov	r3, r2
 80001e4:	717b      	strb	r3, [r7, #5]
	//	Direction read from Peripheral
	//	Transfere Complete Interrupt
	//	Channel Disable

		//DMA1 ->	Channel[0].SCR = 0x00007AC2;
		switch (source)
 80001e6:	79bb      	ldrb	r3, [r7, #6]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d001      	beq.n	80001f0 <DMA1_voidChannelInit+0x1c>
 80001ec:	2b01      	cmp	r3, #1
			}
			else if (sink == DMA_Peripheral)
			{

			}
			break;
 80001ee:	e0a4      	b.n	800033a <DMA1_voidChannelInit+0x166>
			if (sink == DMA_Memory)
 80001f0:	797b      	ldrb	r3, [r7, #5]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	f040 80a0 	bne.w	8000338 <DMA1_voidChannelInit+0x164>
			    DMA1 -> Channel[Channel_copy].SCR |= ( 3 << 16);
 80001f8:	4953      	ldr	r1, [pc, #332]	; (8000348 <DMA1_voidChannelInit+0x174>)
 80001fa:	79fa      	ldrb	r2, [r7, #7]
 80001fc:	4613      	mov	r3, r2
 80001fe:	005b      	lsls	r3, r3, #1
 8000200:	4413      	add	r3, r2
 8000202:	00db      	lsls	r3, r3, #3
 8000204:	440b      	add	r3, r1
 8000206:	3310      	adds	r3, #16
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	484f      	ldr	r0, [pc, #316]	; (8000348 <DMA1_voidChannelInit+0x174>)
 800020c:	79fa      	ldrb	r2, [r7, #7]
 800020e:	f443 3140 	orr.w	r1, r3, #196608	; 0x30000
 8000212:	4613      	mov	r3, r2
 8000214:	005b      	lsls	r3, r3, #1
 8000216:	4413      	add	r3, r2
 8000218:	00db      	lsls	r3, r3, #3
 800021a:	4403      	add	r3, r0
 800021c:	3310      	adds	r3, #16
 800021e:	6019      	str	r1, [r3, #0]
			    DMA1 -> Channel[Channel_copy].SCR |= (3   << 13);
 8000220:	4949      	ldr	r1, [pc, #292]	; (8000348 <DMA1_voidChannelInit+0x174>)
 8000222:	79fa      	ldrb	r2, [r7, #7]
 8000224:	4613      	mov	r3, r2
 8000226:	005b      	lsls	r3, r3, #1
 8000228:	4413      	add	r3, r2
 800022a:	00db      	lsls	r3, r3, #3
 800022c:	440b      	add	r3, r1
 800022e:	3310      	adds	r3, #16
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	4845      	ldr	r0, [pc, #276]	; (8000348 <DMA1_voidChannelInit+0x174>)
 8000234:	79fa      	ldrb	r2, [r7, #7]
 8000236:	f443 41c0 	orr.w	r1, r3, #24576	; 0x6000
 800023a:	4613      	mov	r3, r2
 800023c:	005b      	lsls	r3, r3, #1
 800023e:	4413      	add	r3, r2
 8000240:	00db      	lsls	r3, r3, #3
 8000242:	4403      	add	r3, r0
 8000244:	3310      	adds	r3, #16
 8000246:	6019      	str	r1, [r3, #0]
			    DMA1 -> Channel[Channel_copy].SCR |= (3   << 11);
 8000248:	493f      	ldr	r1, [pc, #252]	; (8000348 <DMA1_voidChannelInit+0x174>)
 800024a:	79fa      	ldrb	r2, [r7, #7]
 800024c:	4613      	mov	r3, r2
 800024e:	005b      	lsls	r3, r3, #1
 8000250:	4413      	add	r3, r2
 8000252:	00db      	lsls	r3, r3, #3
 8000254:	440b      	add	r3, r1
 8000256:	3310      	adds	r3, #16
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	483b      	ldr	r0, [pc, #236]	; (8000348 <DMA1_voidChannelInit+0x174>)
 800025c:	79fa      	ldrb	r2, [r7, #7]
 800025e:	f443 51c0 	orr.w	r1, r3, #6144	; 0x1800
 8000262:	4613      	mov	r3, r2
 8000264:	005b      	lsls	r3, r3, #1
 8000266:	4413      	add	r3, r2
 8000268:	00db      	lsls	r3, r3, #3
 800026a:	4403      	add	r3, r0
 800026c:	3310      	adds	r3, #16
 800026e:	6019      	str	r1, [r3, #0]
			    DMA1 -> Channel[Channel_copy].SCR |= 1 << 10;
 8000270:	4935      	ldr	r1, [pc, #212]	; (8000348 <DMA1_voidChannelInit+0x174>)
 8000272:	79fa      	ldrb	r2, [r7, #7]
 8000274:	4613      	mov	r3, r2
 8000276:	005b      	lsls	r3, r3, #1
 8000278:	4413      	add	r3, r2
 800027a:	00db      	lsls	r3, r3, #3
 800027c:	440b      	add	r3, r1
 800027e:	3310      	adds	r3, #16
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4831      	ldr	r0, [pc, #196]	; (8000348 <DMA1_voidChannelInit+0x174>)
 8000284:	79fa      	ldrb	r2, [r7, #7]
 8000286:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 800028a:	4613      	mov	r3, r2
 800028c:	005b      	lsls	r3, r3, #1
 800028e:	4413      	add	r3, r2
 8000290:	00db      	lsls	r3, r3, #3
 8000292:	4403      	add	r3, r0
 8000294:	3310      	adds	r3, #16
 8000296:	6019      	str	r1, [r3, #0]
			    DMA1 -> Channel[Channel_copy].SCR |= 1 << 9;
 8000298:	492b      	ldr	r1, [pc, #172]	; (8000348 <DMA1_voidChannelInit+0x174>)
 800029a:	79fa      	ldrb	r2, [r7, #7]
 800029c:	4613      	mov	r3, r2
 800029e:	005b      	lsls	r3, r3, #1
 80002a0:	4413      	add	r3, r2
 80002a2:	00db      	lsls	r3, r3, #3
 80002a4:	440b      	add	r3, r1
 80002a6:	3310      	adds	r3, #16
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4827      	ldr	r0, [pc, #156]	; (8000348 <DMA1_voidChannelInit+0x174>)
 80002ac:	79fa      	ldrb	r2, [r7, #7]
 80002ae:	f443 7100 	orr.w	r1, r3, #512	; 0x200
 80002b2:	4613      	mov	r3, r2
 80002b4:	005b      	lsls	r3, r3, #1
 80002b6:	4413      	add	r3, r2
 80002b8:	00db      	lsls	r3, r3, #3
 80002ba:	4403      	add	r3, r0
 80002bc:	3310      	adds	r3, #16
 80002be:	6019      	str	r1, [r3, #0]
			    DMA1 -> Channel[Channel_copy].SCR |= 1 << 4;
 80002c0:	4921      	ldr	r1, [pc, #132]	; (8000348 <DMA1_voidChannelInit+0x174>)
 80002c2:	79fa      	ldrb	r2, [r7, #7]
 80002c4:	4613      	mov	r3, r2
 80002c6:	005b      	lsls	r3, r3, #1
 80002c8:	4413      	add	r3, r2
 80002ca:	00db      	lsls	r3, r3, #3
 80002cc:	440b      	add	r3, r1
 80002ce:	3310      	adds	r3, #16
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	481d      	ldr	r0, [pc, #116]	; (8000348 <DMA1_voidChannelInit+0x174>)
 80002d4:	79fa      	ldrb	r2, [r7, #7]
 80002d6:	f043 0110 	orr.w	r1, r3, #16
 80002da:	4613      	mov	r3, r2
 80002dc:	005b      	lsls	r3, r3, #1
 80002de:	4413      	add	r3, r2
 80002e0:	00db      	lsls	r3, r3, #3
 80002e2:	4403      	add	r3, r0
 80002e4:	3310      	adds	r3, #16
 80002e6:	6019      	str	r1, [r3, #0]
			    DMA1 -> Channel[Channel_copy].SCR |= 3 << 6;
 80002e8:	4917      	ldr	r1, [pc, #92]	; (8000348 <DMA1_voidChannelInit+0x174>)
 80002ea:	79fa      	ldrb	r2, [r7, #7]
 80002ec:	4613      	mov	r3, r2
 80002ee:	005b      	lsls	r3, r3, #1
 80002f0:	4413      	add	r3, r2
 80002f2:	00db      	lsls	r3, r3, #3
 80002f4:	440b      	add	r3, r1
 80002f6:	3310      	adds	r3, #16
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4813      	ldr	r0, [pc, #76]	; (8000348 <DMA1_voidChannelInit+0x174>)
 80002fc:	79fa      	ldrb	r2, [r7, #7]
 80002fe:	f043 01c0 	orr.w	r1, r3, #192	; 0xc0
 8000302:	4613      	mov	r3, r2
 8000304:	005b      	lsls	r3, r3, #1
 8000306:	4413      	add	r3, r2
 8000308:	00db      	lsls	r3, r3, #3
 800030a:	4403      	add	r3, r0
 800030c:	3310      	adds	r3, #16
 800030e:	6019      	str	r1, [r3, #0]
			    DMA1 -> Channel[Channel_copy].SCR |= 1 << 0;
 8000310:	490d      	ldr	r1, [pc, #52]	; (8000348 <DMA1_voidChannelInit+0x174>)
 8000312:	79fa      	ldrb	r2, [r7, #7]
 8000314:	4613      	mov	r3, r2
 8000316:	005b      	lsls	r3, r3, #1
 8000318:	4413      	add	r3, r2
 800031a:	00db      	lsls	r3, r3, #3
 800031c:	440b      	add	r3, r1
 800031e:	3310      	adds	r3, #16
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	4809      	ldr	r0, [pc, #36]	; (8000348 <DMA1_voidChannelInit+0x174>)
 8000324:	79fa      	ldrb	r2, [r7, #7]
 8000326:	f043 0101 	orr.w	r1, r3, #1
 800032a:	4613      	mov	r3, r2
 800032c:	005b      	lsls	r3, r3, #1
 800032e:	4413      	add	r3, r2
 8000330:	00db      	lsls	r3, r3, #3
 8000332:	4403      	add	r3, r0
 8000334:	3310      	adds	r3, #16
 8000336:	6019      	str	r1, [r3, #0]
			break;
 8000338:	bf00      	nop
		}
}
 800033a:	bf00      	nop
 800033c:	370c      	adds	r7, #12
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	40026000 	.word	0x40026000

0800034c <DMA1_voidStartChannel>:


void	DMA1_voidStartChannel(u8 Channel_copy, u32 * SrcAdd,u32 * DestAdd,u16 BlockLength)
{
 800034c:	b480      	push	{r7}
 800034e:	b085      	sub	sp, #20
 8000350:	af00      	add	r7, sp, #0
 8000352:	60b9      	str	r1, [r7, #8]
 8000354:	607a      	str	r2, [r7, #4]
 8000356:	461a      	mov	r2, r3
 8000358:	4603      	mov	r3, r0
 800035a:	73fb      	strb	r3, [r7, #15]
 800035c:	4613      	mov	r3, r2
 800035e:	81bb      	strh	r3, [r7, #12]
	/*		Make Sure that the channel is  disabled */
	CLR_BIT(DMA1 -> Channel[Channel_copy].SCR,0);
 8000360:	492a      	ldr	r1, [pc, #168]	; (800040c <DMA1_voidStartChannel+0xc0>)
 8000362:	7bfa      	ldrb	r2, [r7, #15]
 8000364:	4613      	mov	r3, r2
 8000366:	005b      	lsls	r3, r3, #1
 8000368:	4413      	add	r3, r2
 800036a:	00db      	lsls	r3, r3, #3
 800036c:	440b      	add	r3, r1
 800036e:	3310      	adds	r3, #16
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4826      	ldr	r0, [pc, #152]	; (800040c <DMA1_voidStartChannel+0xc0>)
 8000374:	7bfa      	ldrb	r2, [r7, #15]
 8000376:	f023 0101 	bic.w	r1, r3, #1
 800037a:	4613      	mov	r3, r2
 800037c:	005b      	lsls	r3, r3, #1
 800037e:	4413      	add	r3, r2
 8000380:	00db      	lsls	r3, r3, #3
 8000382:	4403      	add	r3, r0
 8000384:	3310      	adds	r3, #16
 8000386:	6019      	str	r1, [r3, #0]

	DMA1 -> Channel[Channel_copy].SPAR	=	SrcAdd;
 8000388:	4820      	ldr	r0, [pc, #128]	; (800040c <DMA1_voidStartChannel+0xc0>)
 800038a:	7bfb      	ldrb	r3, [r7, #15]
 800038c:	68b9      	ldr	r1, [r7, #8]
 800038e:	1c5a      	adds	r2, r3, #1
 8000390:	4613      	mov	r3, r2
 8000392:	005b      	lsls	r3, r3, #1
 8000394:	4413      	add	r3, r2
 8000396:	00db      	lsls	r3, r3, #3
 8000398:	4403      	add	r3, r0
 800039a:	6019      	str	r1, [r3, #0]
	DMA1 -> Channel[Channel_copy].SM0AR	=	DestAdd;
 800039c:	481b      	ldr	r0, [pc, #108]	; (800040c <DMA1_voidStartChannel+0xc0>)
 800039e:	7bfb      	ldrb	r3, [r7, #15]
 80003a0:	6879      	ldr	r1, [r7, #4]
 80003a2:	1c5a      	adds	r2, r3, #1
 80003a4:	4613      	mov	r3, r2
 80003a6:	005b      	lsls	r3, r3, #1
 80003a8:	4413      	add	r3, r2
 80003aa:	00db      	lsls	r3, r3, #3
 80003ac:	4403      	add	r3, r0
 80003ae:	3304      	adds	r3, #4
 80003b0:	6019      	str	r1, [r3, #0]

	/*	Load the Block Length				*/
	DMA1 -> Channel[Channel_copy].SNDTR	=	BlockLength;
 80003b2:	4816      	ldr	r0, [pc, #88]	; (800040c <DMA1_voidStartChannel+0xc0>)
 80003b4:	7bfa      	ldrb	r2, [r7, #15]
 80003b6:	89b9      	ldrh	r1, [r7, #12]
 80003b8:	4613      	mov	r3, r2
 80003ba:	005b      	lsls	r3, r3, #1
 80003bc:	4413      	add	r3, r2
 80003be:	00db      	lsls	r3, r3, #3
 80003c0:	4403      	add	r3, r0
 80003c2:	3314      	adds	r3, #20
 80003c4:	6019      	str	r1, [r3, #0]

	//DMA1 -> CHS
	/*		Make Sure that the channel is  Enabled to strat transfere*/
	DMA1 -> HISR = 0xffffffff;
 80003c6:	4b11      	ldr	r3, [pc, #68]	; (800040c <DMA1_voidStartChannel+0xc0>)
 80003c8:	f04f 32ff 	mov.w	r2, #4294967295
 80003cc:	605a      	str	r2, [r3, #4]
	DMA1 -> LISR = 0xffffffff;
 80003ce:	4b0f      	ldr	r3, [pc, #60]	; (800040c <DMA1_voidStartChannel+0xc0>)
 80003d0:	f04f 32ff 	mov.w	r2, #4294967295
 80003d4:	601a      	str	r2, [r3, #0]
	SET_BIT(DMA1 -> Channel[Channel_copy].SCR,0);
 80003d6:	490d      	ldr	r1, [pc, #52]	; (800040c <DMA1_voidStartChannel+0xc0>)
 80003d8:	7bfa      	ldrb	r2, [r7, #15]
 80003da:	4613      	mov	r3, r2
 80003dc:	005b      	lsls	r3, r3, #1
 80003de:	4413      	add	r3, r2
 80003e0:	00db      	lsls	r3, r3, #3
 80003e2:	440b      	add	r3, r1
 80003e4:	3310      	adds	r3, #16
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4808      	ldr	r0, [pc, #32]	; (800040c <DMA1_voidStartChannel+0xc0>)
 80003ea:	7bfa      	ldrb	r2, [r7, #15]
 80003ec:	f043 0101 	orr.w	r1, r3, #1
 80003f0:	4613      	mov	r3, r2
 80003f2:	005b      	lsls	r3, r3, #1
 80003f4:	4413      	add	r3, r2
 80003f6:	00db      	lsls	r3, r3, #3
 80003f8:	4403      	add	r3, r0
 80003fa:	3310      	adds	r3, #16
 80003fc:	6019      	str	r1, [r3, #0]
}
 80003fe:	bf00      	nop
 8000400:	3714      	adds	r7, #20
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	40026000 	.word	0x40026000

08000410 <EXTI0_IRQHandler>:
		EXTI0_CallBack = Fptr;
	}
}

void	EXTI0_IRQHandler(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0

	/*	Clear the Flag			*/
	EXTI0_CallBack();
 8000414:	4b05      	ldr	r3, [pc, #20]	; (800042c <EXTI0_IRQHandler+0x1c>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4798      	blx	r3
	SET_BIT(EXTI->PR,6);
 800041a:	4b05      	ldr	r3, [pc, #20]	; (8000430 <EXTI0_IRQHandler+0x20>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a04      	ldr	r2, [pc, #16]	; (8000430 <EXTI0_IRQHandler+0x20>)
 8000420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000424:	6153      	str	r3, [r2, #20]
}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	2000001c 	.word	0x2000001c
 8000430:	40010400 	.word	0x40010400

08000434 <NVIC_voidInit>:
#include "NVIC_Private.h"
#include "NVIC_Interface.h"


void		NVIC_voidInit(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
#ifndef SCB_AIRCR
#define SCB_BASE_ADD    0xE000ED00
#define SCB_AIRCR        *((volatile u32 * )(SCB_BASE_ADD + 0x0C))
#endif
	SCB_AIRCR = 0x05FA0600;
 8000438:	4b03      	ldr	r3, [pc, #12]	; (8000448 <NVIC_voidInit+0x14>)
 800043a:	4a04      	ldr	r2, [pc, #16]	; (800044c <NVIC_voidInit+0x18>)
 800043c:	601a      	str	r2, [r3, #0]
}
 800043e:	bf00      	nop
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr
 8000448:	e000ed0c 	.word	0xe000ed0c
 800044c:	05fa0600 	.word	0x05fa0600

08000450 <NVIC_voidEnablePerInt>:

void		NVIC_voidEnablePerInt(u8 IntNum)
{
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	4603      	mov	r3, r0
 8000458:	71fb      	strb	r3, [r7, #7]
	if (IntNum < 32)
 800045a:	79fb      	ldrb	r3, [r7, #7]
 800045c:	2b1f      	cmp	r3, #31
 800045e:	d805      	bhi.n	800046c <NVIC_voidEnablePerInt+0x1c>
	{
		NVIC_ISER0 = 1 << IntNum;
 8000460:	79fb      	ldrb	r3, [r7, #7]
 8000462:	2201      	movs	r2, #1
 8000464:	409a      	lsls	r2, r3
 8000466:	4b0a      	ldr	r3, [pc, #40]	; (8000490 <NVIC_voidEnablePerInt+0x40>)
 8000468:	601a      	str	r2, [r3, #0]
	else if (IntNum < 64)
	{
		IntNum -= 32;
		NVIC_ISER1 = 1 << IntNum;
	}
}
 800046a:	e00a      	b.n	8000482 <NVIC_voidEnablePerInt+0x32>
	else if (IntNum < 64)
 800046c:	79fb      	ldrb	r3, [r7, #7]
 800046e:	2b3f      	cmp	r3, #63	; 0x3f
 8000470:	d807      	bhi.n	8000482 <NVIC_voidEnablePerInt+0x32>
		IntNum -= 32;
 8000472:	79fb      	ldrb	r3, [r7, #7]
 8000474:	3b20      	subs	r3, #32
 8000476:	71fb      	strb	r3, [r7, #7]
		NVIC_ISER1 = 1 << IntNum;
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	2201      	movs	r2, #1
 800047c:	409a      	lsls	r2, r3
 800047e:	4b05      	ldr	r3, [pc, #20]	; (8000494 <NVIC_voidEnablePerInt+0x44>)
 8000480:	601a      	str	r2, [r3, #0]
}
 8000482:	bf00      	nop
 8000484:	370c      	adds	r7, #12
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	e000e100 	.word	0xe000e100
 8000494:	e000e104 	.word	0xe000e104

08000498 <RCC_voidSysClkInit>:

#include	"RCC_Private.h"
#include	"RCC_Config.h"

void	RCC_voidSysClkInit(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
	RCC->CR &= 0b11111 << CR_HSITRIM;
 800049c:	4b14      	ldr	r3, [pc, #80]	; (80004f0 <RCC_voidSysClkInit+0x58>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a13      	ldr	r2, [pc, #76]	; (80004f0 <RCC_voidSysClkInit+0x58>)
 80004a2:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80004a6:	6013      	str	r3, [r2, #0]
#if HSI == ON
	// Enable Internal Clock
	RCC->CR |= (1 << CR_HSION);
 80004a8:	4b11      	ldr	r3, [pc, #68]	; (80004f0 <RCC_voidSysClkInit+0x58>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a10      	ldr	r2, [pc, #64]	; (80004f0 <RCC_voidSysClkInit+0x58>)
 80004ae:	f043 0301 	orr.w	r3, r3, #1
 80004b2:	6013      	str	r3, [r2, #0]
	// Waiting Internal Ready
	while(!GET_BIT(RCC->CR,CR_HSIRDY));
 80004b4:	bf00      	nop
 80004b6:	4b0e      	ldr	r3, [pc, #56]	; (80004f0 <RCC_voidSysClkInit+0x58>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	085b      	lsrs	r3, r3, #1
 80004bc:	f003 0301 	and.w	r3, r3, #1
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d0f8      	beq.n	80004b6 <RCC_voidSysClkInit+0x1e>
	while(!GET_BIT(RCC->CR,CR_PLLRDY));
#endif

// Select Sys Clock
#if CLK_SRC == HSI_SRC
	RCC->CFGR |= HSI_ON;
 80004c4:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <RCC_voidSysClkInit+0x58>)
 80004c6:	4a0a      	ldr	r2, [pc, #40]	; (80004f0 <RCC_voidSysClkInit+0x58>)
 80004c8:	689b      	ldr	r3, [r3, #8]
 80004ca:	6093      	str	r3, [r2, #8]
	#error "Wrong Clock Selection"
#endif
#endif

	// AHP Prescaller
	RCC->CFGR |= AHP_PRESCALLER << CFGR_HPRE;
 80004cc:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <RCC_voidSysClkInit+0x58>)
 80004ce:	4a08      	ldr	r2, [pc, #32]	; (80004f0 <RCC_voidSysClkInit+0x58>)
 80004d0:	689b      	ldr	r3, [r3, #8]
 80004d2:	6093      	str	r3, [r2, #8]
	// APB1 Prescaller
	RCC->CFGR |= APB1_PRESCALLER << CFGR_PPRE1;
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <RCC_voidSysClkInit+0x58>)
 80004d6:	4a06      	ldr	r2, [pc, #24]	; (80004f0 <RCC_voidSysClkInit+0x58>)
 80004d8:	689b      	ldr	r3, [r3, #8]
 80004da:	6093      	str	r3, [r2, #8]
	// APB2 Prescaller
	RCC->CFGR |= APB2_PRESCALLER << CFGR_PPRE2;
 80004dc:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <RCC_voidSysClkInit+0x58>)
 80004de:	4a04      	ldr	r2, [pc, #16]	; (80004f0 <RCC_voidSysClkInit+0x58>)
 80004e0:	689b      	ldr	r3, [r3, #8]
 80004e2:	6093      	str	r3, [r2, #8]
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	40023800 	.word	0x40023800

080004f4 <RCC_voidEnablePerClk>:

//RCC_voidEnablePerClk(RCC_AHB1,0);

void	RCC_voidEnablePerClk(u8 BusId , u8 PerId)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	460a      	mov	r2, r1
 80004fe:	71fb      	strb	r3, [r7, #7]
 8000500:	4613      	mov	r3, r2
 8000502:	71bb      	strb	r3, [r7, #6]
	/*		Range Check		*/
	if(BusId < 3 && PerId < 32)
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	2b02      	cmp	r3, #2
 8000508:	d82d      	bhi.n	8000566 <RCC_voidEnablePerClk+0x72>
 800050a:	79bb      	ldrb	r3, [r7, #6]
 800050c:	2b1f      	cmp	r3, #31
 800050e:	d82a      	bhi.n	8000566 <RCC_voidEnablePerClk+0x72>
	{
		switch(BusId)
 8000510:	79fb      	ldrb	r3, [r7, #7]
 8000512:	2b02      	cmp	r3, #2
 8000514:	d01c      	beq.n	8000550 <RCC_voidEnablePerClk+0x5c>
 8000516:	2b02      	cmp	r3, #2
 8000518:	dc25      	bgt.n	8000566 <RCC_voidEnablePerClk+0x72>
 800051a:	2b00      	cmp	r3, #0
 800051c:	d002      	beq.n	8000524 <RCC_voidEnablePerClk+0x30>
 800051e:	2b01      	cmp	r3, #1
 8000520:	d00b      	beq.n	800053a <RCC_voidEnablePerClk+0x46>
			case RCC_APB1 :	SET_BIT(RCC->APB1ENR,PerId);		break;
			case RCC_APB2 :	SET_BIT(RCC->APB2ENR,PerId);		break;
		}
	}else{	/*	Report Error  */}

}
 8000522:	e020      	b.n	8000566 <RCC_voidEnablePerClk+0x72>
			case RCC_AHB1 :	SET_BIT(RCC->AHB1ENR,PerId);		break;
 8000524:	4b13      	ldr	r3, [pc, #76]	; (8000574 <RCC_voidEnablePerClk+0x80>)
 8000526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000528:	79ba      	ldrb	r2, [r7, #6]
 800052a:	2101      	movs	r1, #1
 800052c:	fa01 f202 	lsl.w	r2, r1, r2
 8000530:	4611      	mov	r1, r2
 8000532:	4a10      	ldr	r2, [pc, #64]	; (8000574 <RCC_voidEnablePerClk+0x80>)
 8000534:	430b      	orrs	r3, r1
 8000536:	6313      	str	r3, [r2, #48]	; 0x30
 8000538:	e015      	b.n	8000566 <RCC_voidEnablePerClk+0x72>
			case RCC_APB1 :	SET_BIT(RCC->APB1ENR,PerId);		break;
 800053a:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <RCC_voidEnablePerClk+0x80>)
 800053c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053e:	79ba      	ldrb	r2, [r7, #6]
 8000540:	2101      	movs	r1, #1
 8000542:	fa01 f202 	lsl.w	r2, r1, r2
 8000546:	4611      	mov	r1, r2
 8000548:	4a0a      	ldr	r2, [pc, #40]	; (8000574 <RCC_voidEnablePerClk+0x80>)
 800054a:	430b      	orrs	r3, r1
 800054c:	6413      	str	r3, [r2, #64]	; 0x40
 800054e:	e00a      	b.n	8000566 <RCC_voidEnablePerClk+0x72>
			case RCC_APB2 :	SET_BIT(RCC->APB2ENR,PerId);		break;
 8000550:	4b08      	ldr	r3, [pc, #32]	; (8000574 <RCC_voidEnablePerClk+0x80>)
 8000552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000554:	79ba      	ldrb	r2, [r7, #6]
 8000556:	2101      	movs	r1, #1
 8000558:	fa01 f202 	lsl.w	r2, r1, r2
 800055c:	4611      	mov	r1, r2
 800055e:	4a05      	ldr	r2, [pc, #20]	; (8000574 <RCC_voidEnablePerClk+0x80>)
 8000560:	430b      	orrs	r3, r1
 8000562:	6453      	str	r3, [r2, #68]	; 0x44
 8000564:	bf00      	nop
}
 8000566:	bf00      	nop
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	40023800 	.word	0x40023800

08000578 <SysTick_Handler>:
	STK -> VAL = 0;
}


void 	SysTick_Handler(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
	u8	u8Temp = 0 ;
 800057e:	2300      	movs	r3, #0
 8000580:	71fb      	strb	r3, [r7, #7]
	if(Mode == SINGLE_INTERVALE)
 8000582:	4b12      	ldr	r3, [pc, #72]	; (80005cc <SysTick_Handler+0x54>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d111      	bne.n	80005ae <SysTick_Handler+0x36>
	{
		/*	Disable Interrupt	*/
			CLR_BIT(STK -> CTRL , 1);
 800058a:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <SysTick_Handler+0x58>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a10      	ldr	r2, [pc, #64]	; (80005d0 <SysTick_Handler+0x58>)
 8000590:	f023 0302 	bic.w	r3, r3, #2
 8000594:	6013      	str	r3, [r2, #0]
		/*	Disable Timer		*/
			CLR_BIT(STK -> CTRL , 0);
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <SysTick_Handler+0x58>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a0d      	ldr	r2, [pc, #52]	; (80005d0 <SysTick_Handler+0x58>)
 800059c:	f023 0301 	bic.w	r3, r3, #1
 80005a0:	6013      	str	r3, [r2, #0]
			STK -> LOAD = 0;
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <SysTick_Handler+0x58>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	605a      	str	r2, [r3, #4]
			STK -> VAL = 0;
 80005a8:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <SysTick_Handler+0x58>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
	}
	STK_CallBack();
 80005ae:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <SysTick_Handler+0x5c>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4798      	blx	r3
	/*	Clear Interrupt Flag		*/
	u8Temp = 	GET_BIT(STK -> CTRL , 16);
 80005b4:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <SysTick_Handler+0x58>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	0c1b      	lsrs	r3, r3, #16
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	f003 0301 	and.w	r3, r3, #1
 80005c0:	71fb      	strb	r3, [r7, #7]
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000020 	.word	0x20000020
 80005d0:	e000e010 	.word	0xe000e010
 80005d4:	20000024 	.word	0x20000024

080005d8 <main>:
u32 arr2[1000];

u32 arr3[1000];
u32 arr4[1000];
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
    /* Loop forever */
	RCC_voidSysClkInit();
 80005de:	f7ff ff5b 	bl	8000498 <RCC_voidSysClkInit>
	RCC_voidEnablePerClk(RCC_AHB1, 21);
 80005e2:	2115      	movs	r1, #21
 80005e4:	2000      	movs	r0, #0
 80005e6:	f7ff ff85 	bl	80004f4 <RCC_voidEnablePerClk>

	for (u16 i = 0; i < 1000;i++)
 80005ea:	2300      	movs	r3, #0
 80005ec:	80fb      	strh	r3, [r7, #6]
 80005ee:	e007      	b.n	8000600 <main+0x28>
	{
		arr1[i] = i;
 80005f0:	88fb      	ldrh	r3, [r7, #6]
 80005f2:	88fa      	ldrh	r2, [r7, #6]
 80005f4:	491e      	ldr	r1, [pc, #120]	; (8000670 <main+0x98>)
 80005f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (u16 i = 0; i < 1000;i++)
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	3301      	adds	r3, #1
 80005fe:	80fb      	strh	r3, [r7, #6]
 8000600:	88fb      	ldrh	r3, [r7, #6]
 8000602:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000606:	d3f3      	bcc.n	80005f0 <main+0x18>
	}
	for (u16 i = 0; i < 1000;i++)
 8000608:	2300      	movs	r3, #0
 800060a:	80bb      	strh	r3, [r7, #4]
 800060c:	e007      	b.n	800061e <main+0x46>
	{
		arr2[i] = i;
 800060e:	88bb      	ldrh	r3, [r7, #4]
 8000610:	88ba      	ldrh	r2, [r7, #4]
 8000612:	4918      	ldr	r1, [pc, #96]	; (8000674 <main+0x9c>)
 8000614:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (u16 i = 0; i < 1000;i++)
 8000618:	88bb      	ldrh	r3, [r7, #4]
 800061a:	3301      	adds	r3, #1
 800061c:	80bb      	strh	r3, [r7, #4]
 800061e:	88bb      	ldrh	r3, [r7, #4]
 8000620:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000624:	d3f3      	bcc.n	800060e <main+0x36>
	}

	DMA1_voidChannelInit(0,DMA_Memory,DMA_Memory);
 8000626:	2200      	movs	r2, #0
 8000628:	2100      	movs	r1, #0
 800062a:	2000      	movs	r0, #0
 800062c:	f7ff fdd2 	bl	80001d4 <DMA1_voidChannelInit>
	DMA1_voidStartChannel(DMA_Channel1, arr1, arr3, 1000);
 8000630:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000634:	4a10      	ldr	r2, [pc, #64]	; (8000678 <main+0xa0>)
 8000636:	490e      	ldr	r1, [pc, #56]	; (8000670 <main+0x98>)
 8000638:	2000      	movs	r0, #0
 800063a:	f7ff fe87 	bl	800034c <DMA1_voidStartChannel>
	NVIC_voidInit();
 800063e:	f7ff fef9 	bl	8000434 <NVIC_voidInit>
	NVIC_voidEnablePerInt(18);
 8000642:	2012      	movs	r0, #18
 8000644:	f7ff ff04 	bl	8000450 <NVIC_voidEnablePerInt>

	for (u16 i = 0; i < 100; i++)
 8000648:	2300      	movs	r3, #0
 800064a:	807b      	strh	r3, [r7, #2]
 800064c:	e00a      	b.n	8000664 <main+0x8c>
	{
		arr4[i] = arr2[i];
 800064e:	887a      	ldrh	r2, [r7, #2]
 8000650:	887b      	ldrh	r3, [r7, #2]
 8000652:	4908      	ldr	r1, [pc, #32]	; (8000674 <main+0x9c>)
 8000654:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000658:	4908      	ldr	r1, [pc, #32]	; (800067c <main+0xa4>)
 800065a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (u16 i = 0; i < 100; i++)
 800065e:	887b      	ldrh	r3, [r7, #2]
 8000660:	3301      	adds	r3, #1
 8000662:	807b      	strh	r3, [r7, #2]
 8000664:	887b      	ldrh	r3, [r7, #2]
 8000666:	2b63      	cmp	r3, #99	; 0x63
 8000668:	d9f1      	bls.n	800064e <main+0x76>
	}

	while(1)
	{
		asm("NOP");
 800066a:	bf00      	nop
 800066c:	e7fd      	b.n	800066a <main+0x92>
 800066e:	bf00      	nop
 8000670:	20000028 	.word	0x20000028
 8000674:	20000fc8 	.word	0x20000fc8
 8000678:	20001f68 	.word	0x20001f68
 800067c:	20002f08 	.word	0x20002f08

08000680 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000680:	480d      	ldr	r0, [pc, #52]	; (80006b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000682:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000684:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000688:	480c      	ldr	r0, [pc, #48]	; (80006bc <LoopForever+0x6>)
  ldr r1, =_edata
 800068a:	490d      	ldr	r1, [pc, #52]	; (80006c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800068c:	4a0d      	ldr	r2, [pc, #52]	; (80006c4 <LoopForever+0xe>)
  movs r3, #0
 800068e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000690:	e002      	b.n	8000698 <LoopCopyDataInit>

08000692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000696:	3304      	adds	r3, #4

08000698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800069a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800069c:	d3f9      	bcc.n	8000692 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800069e:	4a0a      	ldr	r2, [pc, #40]	; (80006c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006a0:	4c0a      	ldr	r4, [pc, #40]	; (80006cc <LoopForever+0x16>)
  movs r3, #0
 80006a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a4:	e001      	b.n	80006aa <LoopFillZerobss>

080006a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a8:	3204      	adds	r2, #4

080006aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006ac:	d3fb      	bcc.n	80006a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006ae:	f000 f811 	bl	80006d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006b2:	f7ff ff91 	bl	80005d8 <main>

080006b6 <LoopForever>:

LoopForever:
  b LoopForever
 80006b6:	e7fe      	b.n	80006b6 <LoopForever>
  ldr   r0, =_estack
 80006b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80006bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80006c4:	0800073c 	.word	0x0800073c
  ldr r2, =_sbss
 80006c8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80006cc:	20003ea8 	.word	0x20003ea8

080006d0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d0:	e7fe      	b.n	80006d0 <ADC_IRQHandler>
	...

080006d4 <__libc_init_array>:
 80006d4:	b570      	push	{r4, r5, r6, lr}
 80006d6:	4d0d      	ldr	r5, [pc, #52]	; (800070c <__libc_init_array+0x38>)
 80006d8:	4c0d      	ldr	r4, [pc, #52]	; (8000710 <__libc_init_array+0x3c>)
 80006da:	1b64      	subs	r4, r4, r5
 80006dc:	10a4      	asrs	r4, r4, #2
 80006de:	2600      	movs	r6, #0
 80006e0:	42a6      	cmp	r6, r4
 80006e2:	d109      	bne.n	80006f8 <__libc_init_array+0x24>
 80006e4:	4d0b      	ldr	r5, [pc, #44]	; (8000714 <__libc_init_array+0x40>)
 80006e6:	4c0c      	ldr	r4, [pc, #48]	; (8000718 <__libc_init_array+0x44>)
 80006e8:	f000 f818 	bl	800071c <_init>
 80006ec:	1b64      	subs	r4, r4, r5
 80006ee:	10a4      	asrs	r4, r4, #2
 80006f0:	2600      	movs	r6, #0
 80006f2:	42a6      	cmp	r6, r4
 80006f4:	d105      	bne.n	8000702 <__libc_init_array+0x2e>
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80006fc:	4798      	blx	r3
 80006fe:	3601      	adds	r6, #1
 8000700:	e7ee      	b.n	80006e0 <__libc_init_array+0xc>
 8000702:	f855 3b04 	ldr.w	r3, [r5], #4
 8000706:	4798      	blx	r3
 8000708:	3601      	adds	r6, #1
 800070a:	e7f2      	b.n	80006f2 <__libc_init_array+0x1e>
 800070c:	08000734 	.word	0x08000734
 8000710:	08000734 	.word	0x08000734
 8000714:	08000734 	.word	0x08000734
 8000718:	08000738 	.word	0x08000738

0800071c <_init>:
 800071c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800071e:	bf00      	nop
 8000720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000722:	bc08      	pop	{r3}
 8000724:	469e      	mov	lr, r3
 8000726:	4770      	bx	lr

08000728 <_fini>:
 8000728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800072a:	bf00      	nop
 800072c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800072e:	bc08      	pop	{r3}
 8000730:	469e      	mov	lr, r3
 8000732:	4770      	bx	lr
